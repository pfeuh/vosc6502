#!/usr/bin/python
# -*- coding: utf-8 -*-

import sys
import os
import random

def write(text, fp=sys.stdout):
    fp.write(str(text))
    
def writeln(text, fp=sys.stdout):
    write(text, fp)
    write("\n", fp)

def get8BitsValueText():
    return "$%02X"%random.randint(0, 255)

def get16BitsValueText():
    return "$%04X"%random.randint(256, 65535)

def format_sub(items, table_name, nb_cols=8, width=5, quote=True, fp=sys.stdout):
    writeln("%s = ("%table_name, fp)
    for num, label in enumerate(items):
        if not (num % nb_cols):
            line = "    "

        if label != None:
            if quote:
                label = "'%s'"%label
            else:
                label = "%s"%label.upper()
        else:
            label = "None"
        while len(label) < width:
            label += " "
        line += "%s, "%label

        if (num % nb_cols) == nb_cols - 1:
            writeln(line, fp)
            line = ""
    if line != "":
            writeln(line, fp)
    writeln("    )\n", fp)

def generatePythonTables(table1, table2, fp=sys.stdout):
    writeln("#!/usr/bin/python\n# -*- coding: utf-8 -*-\n", fp)
    writeln("# This file is autogenerated... If you modify it,", fp)
    writeln("# it will be overwritten by the next update!\n", fp)
    opcodes = []
    mnemos = []
    modes = []
    def_modes = []

    for num in range(len(table1)):
        mnemo = table1[num][1:-1].lower()
        mode = table2[num].lower()

        if mnemo == "???":
            mode = None
            mnemo = None
        if mnemo != None:
            if not mnemo in opcodes:
                opcodes.append(mnemo)
        mnemos.append(mnemo)
        modes.append(mode)
        if not mode in def_modes:
            if mode != None:
                def_modes.append(mode)
                    
    format_sub(opcodes, "OPCODES", fp=fp)
    format_sub(mnemos, "MNEMOS", fp=fp)
    for mode in def_modes:
        writeln("%s = '%s'"%(mode.upper(), mode), fp)
    writeln("", fp)
    
    format_sub(modes, "MODES", nb_cols=4, width=11, quote=False, fp=fp)
    
def createTestProgram(opcodes, modes, fp=sys.stdout):
    writeln("\n    ; --------------------------------------- ;", fp)
    writeln("    ;  this program is supposed to uses all   ;", fp)
    writeln("    ;       the official 6502 opcodes         ;", fp)
    writeln("    ; --------------------------------------- ;\n", fp)
    writeln("    ;* = $200 ; (un)comment if neccessary", fp)
    writeln("    _main: ; (un)comment if neccessary", fp)
    writeln("    .export _main\n", fp)
    nb_valid = 0
    for index, opcode in enumerate(opcodes):
        if not (index % 16):
            label = "LABEL_%02d"%(index / 16 + 1)
            writeln("%s:"%label, fp)
        
        opcode = opcode[1:-1].upper()
        mode = modes[index]
        if opcode == "???":
            writeln("                 ; opcode $%02x (illegal)"%(index), fp)
        else:
            nb_valid += 1
            
            if mode == 'inherent':
                text = opcode
            elif mode == 'immediate':
                text = opcode + ' #' + get8BitsValueText()
            elif mode == 'indirect':
                text = opcode + '(' + get16BitsValueText() + ')'
            elif mode == 'accumulator':
                text = opcode + ' A'
            elif mode == 'absolute':
                text = opcode + ' ' + get16BitsValueText()
            elif mode == 'absolx':
                text = opcode + ' ' + get16BitsValueText() + ',X'
            elif mode == 'absoly':
                text = opcode + ' ' + get16BitsValueText() + ',Y'
            elif mode == 'indzerox':
                text = opcode + ' ' + '(' + get8BitsValueText() + ',X)'
            elif mode == 'indzeroy':
                text = opcode + ' ' + '(' + get8BitsValueText() + '),Y'
            elif mode == 'relative':
                text = opcode + ' ' + label
            elif mode == 'zeropage':
                text = opcode + ' ' + get8BitsValueText()
            elif mode == 'zeropagex':
                text = opcode + ' ' + get8BitsValueText() + ',X'
            elif mode == 'zeropagey':
                text = opcode + ' ' + get8BitsValueText() + ',Y'

            else:
                text = opcode + ' ???'

            writeln("    %-12s ; opcode $%02x"%(text, index), fp)

    return nb_valid

def removeComment(text):
    otext = ""
    for car in text:
        if car != "/":
            otext += car
        else:
            return otext.strip()
    
def text2table(lines, tname):
    # don't mess with the format of this file!
    state_wait_tname   = 1
    state_wait_opening = 2
    state_running      = 3
    state = state_wait_tname
    text = ""
    for line in lines:
        if state == state_wait_tname:
            if "%s[]"%tname in line:
                state = state_wait_opening
        elif state == state_wait_opening:
            if "{" in line:
                state = state_running
        elif state == state_running:
            if "}" in line:
                break
            else:
                text += removeComment(line)
    return [word.strip() for word in text.split(',')]
    
if __name__ == "__main__":

    with open("../src/desass6502tables.h") as fp:
        lines = fp.readlines()

    # job for generating test_opcodes.asm
    opcodes = text2table(lines, "mnemo")
    modes = text2table(lines, "*hook")
    assert len(opcodes) == 256
    assert len(modes) == 256
    with open("../sample/test_opcodes/test_opcodes.asm", "w") as fp:
        nb_valid = createTestProgram(opcodes, modes, fp)
    writeln("%d 6502-opcodes created"%nb_valid)

    # job for generating tables for python tools
    with open("../../../../python/atasmPrecompiler/tables6502.py", "w") as fp:
        generatePythonTables(opcodes, modes, fp)






# ../../../../../python/atasmPrecompiler/tables6502.py